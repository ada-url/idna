if(MSVC)
  add_compile_options("/Zi" "/EHsc" "/GR")
  add_compile_options("$<$<C_COMPILER_ID:MSVC>:/utf-8>")
  add_compile_options("$<$<CXX_COMPILER_ID:MSVC>:/utf-8>")
endif()

link_libraries(ada-idna)

file(GLOB_RECURSE test_files RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} *.txt *.json)
foreach(test_files ${test_files})
  configure_file(${test_files} ${test_files} COPYONLY)
endforeach(test_files)

if(MSVC AND BUILD_SHARED_LIBS)
  message(STATUS "For some tests we use Google Test and it fails when building a DLL.")
  message(STATUS "Thus the tests are disabled. Sorry.")
else()
  include(GoogleTest)
  add_executable(identifier_tests identifier_tests.cpp)
  add_executable(mapping_tests mapping_tests.cpp)
  add_executable(punycode_tests punycode_tests.cpp)
  add_executable(to_ascii_tests to_ascii_tests.cpp)
  add_executable(to_unicode_tests to_unicode_tests.cpp)
  add_executable(wpt_tests wpt_tests.cpp)

  target_link_libraries(identifier_tests PRIVATE simdjson GTest::gtest_main)
  target_link_libraries(mapping_tests PRIVATE simdjson GTest::gtest_main)
  target_link_libraries(punycode_tests PRIVATE simdjson GTest::gtest_main)
  target_link_libraries(to_ascii_tests PRIVATE simdjson GTest::gtest_main)
  target_link_libraries(to_unicode_tests PRIVATE simdjson GTest::gtest_main)
  target_link_libraries(wpt_tests PRIVATE simdjson GTest::gtest_main)

  gtest_discover_tests(identifier_tests PROPERTIES TEST_DISCOVERY_TIMEOUT 600)
  gtest_discover_tests(mapping_tests PROPERTIES TEST_DISCOVERY_TIMEOUT 600)
  gtest_discover_tests(punycode_tests PROPERTIES TEST_DISCOVERY_TIMEOUT 600)
  gtest_discover_tests(to_ascii_tests PROPERTIES TEST_DISCOVERY_TIMEOUT 600)
  gtest_discover_tests(to_unicode_tests PROPERTIES TEST_DISCOVERY_TIMEOUT 600)
  gtest_discover_tests(wpt_tests PROPERTIES TEST_DISCOVERY_TIMEOUT 600)

  if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
    if (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 9)
      target_link_libraries(identifier_tests PUBLIC stdc++fs)
      target_link_libraries(mapping_tests PUBLIC stdc++fs)
      target_link_libraries(punycode_tests PUBLIC stdc++fs)
      target_link_libraries(to_ascii_tests PUBLIC stdc++fs)
      target_link_libraries(to_unicode_tests PUBLIC stdc++fs)
      target_link_libraries(wpt_tests PUBLIC stdc++fs)
    endif()
  endif()

  if(MSVC OR MINGW)
    target_compile_definitions(identifier_tests PRIVATE _CRT_SECURE_NO_WARNINGS)
    target_compile_definitions(mapping_tests PRIVATE _CRT_SECURE_NO_WARNINGS)
    target_compile_definitions(punycode_tests PRIVATE _CRT_SECURE_NO_WARNINGS)
    target_compile_definitions(to_ascii_tests PRIVATE _CRT_SECURE_NO_WARNINGS)
    target_compile_definitions(to_unicode_tests PRIVATE _CRT_SECURE_NO_WARNINGS)
    target_compile_definitions(wpt_tests PRIVATE _CRT_SECURE_NO_WARNINGS)
  endif()

endif()